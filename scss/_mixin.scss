@charset "UTF-8";
// mixin & %
// 既定义了mixin也定义了%，根据需求使用@include或@extend调用
//-----------------------------------------------------
// Center-align a block level element
@mixin center-block {
  margin-left: auto;
  margin-right: auto;
}

%center-block {
  @include center-block;
}

// clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%clearfix {
  @include clearfix;
}

// ellipsis multi
@mixin ellipsis-lines($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  word-break: break-all;
}

%ellipsis-lines {
  @include ellipsis-lines;
}

// ellipsis
@mixin ellipsis {
  @include ellipsis-lines(1);
  //overflow: hidden;
  //white-space: nowrap;
  //text-overflow: ellipsis;
}

%ellipsis {
  @include ellipsis;
}


// word-break
// 用于链接地址强制换行
@mixin word-break {
  white-space: normal;
  word-wrap: break-word;
  word-break: break-all;
}

%word-break {
  @include word-break;
}

// disabled
// 禁用样式，加!important
@mixin disabled($textColor: nth($colorDisabled, 1), $bgColor: nth($colorDisabled, 2), $borderColor: true) {
  background-color: $bgColor !important;
  color: $textColor !important;
  cursor: default !important;
  pointer-events: none !important;
  @if $borderColor {
    border: 1px solid nth($colorDisabled, 3);
  }
}

%disabled {
  @include disabled;
}

//display flex
%display-flex {
  display: flex;
  display: -webkit-flex;
}

// fixed top & bottom
@mixin fixed($pos: 0) {
  position: fixed;
  left: 0;
  right: 0;
  @if $pos==bottom {
    bottom: 0;
  } @else {
    top: $pos;
  }
}

%fixed-top {
  @include fixed;
}

%fixed-bottom {
  @include fixed($pos: bottom);
}

// justify
@mixin justify {
  display: flex;
  justify-content: space-between;
}

%justify {
  @include justify;
}

// flex 等分
@mixin equal-flex($children: li) {
  display: flex;
  $childrenEle: li div p a span strong;
  @if index($childrenEle, $children) {
    #{$children} {
      flex: 1;
    }
  } @else {
    .#{$children} {
      flex: 1;
    }
  }
}

%equal-flex {
  @include equal-flex;
}

// flex center
@mixin center-flex($direction: both) {
  display: flex;
  display: -webkit-flex;
  @if $direction==both {
    justify-content: center;
    align-items: center;
  } @else if $direction==x {
    justify-content: center;
  } @else if $direction==y {
    align-items: center;
  }
}

%center-flex {
  @include center-flex;
}

%center-flex-x {
  @include center-flex(x);
}

%center-flex-y {
  @include center-flex(y);
}

// translate center
@mixin center-translate($direction: both) {
  position: absolute;
  @if $direction==both {
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
  } @else if $direction==x {
    left: 50%;
    transform: translate3d(-50%, 0, 0);
  } @else if $direction==y {
    top: 50%;
    transform: translate3d(0, -50%, 0);
  }
}

%center-translate {
  @include center-translate;
}

%center-translate-x {
  @include center-translate(x);
}

%center-translate-y {
  @include center-translate(y);
}

//props-dpr
@mixin props-dpr($props, $values) {
  @if length($props)==1 {
    @if length($values)==1 {
      #{$props}: $values;
      //[data-dpr="2"] & {
      //  #{$props}: $values * 2;
      //}
      //[data-dpr="3"] & {
      //  #{$props}: $values * 3;
      //}
    } @else {
      $valueStr: ();
      @each $value in $values {
        $valueStr: append($valueStr, $value);
      }
      #{$props}: $valueStr;
      //[data-dpr="2"] & {
      //  $valueStr: ();
      //  @each $value in $values {
      //    $valueStr: append($valueStr, $value * 2);
      //  }
      //  #{$props}: $valueStr;
      //}
      //[data-dpr="3"] & {
      //  $valueStr: ();
      //  @each $value in $values {
      //    $valueStr: append($valueStr, $value * 3);
      //  }
      //  #{$props}: $valueStr;
      //}
      // @debug $valueStr;
    }
  } @else {
    @each $prop in $props {
      #{$prop}: nth($values, index($props, $prop));
    }
    //[data-dpr="2"] & {
    //  @each $prop in $props {
    //    #{$prop}: nth($values, index($props, $prop)) * 2;
    //  }
    //}
    //[data-dpr="3"] & {
    //  @each $prop in $props {
    //    #{$prop}: nth($values, index($props, $prop)) * 3;
    //  }
    //}
  }
}

// triangle 三角箭头
%triangle-basic {
  content: "";
  height: 0;
  width: 0;
  overflow: hidden;
}

@mixin triangle($direction: bottom, $borderWidth: 6px, $borderColor: $gray6) {
  @extend %triangle-basic;
  @if $direction==top {
    border-bottom: $borderWidth solid $borderColor;
    border-left: $borderWidth dashed transparent;
    border-right: $borderWidth dashed transparent;
    @include props-dpr(border-bottom-width border-left-width border-right-width, $borderWidth $borderWidth $borderWidth);
  } @else if $direction==right {
    border-left: $borderWidth solid $borderColor;
    border-top: $borderWidth dashed transparent;
    border-bottom: $borderWidth dashed transparent;
    @include props-dpr(border-bottom-width border-left-width border-top-width, $borderWidth $borderWidth $borderWidth);
  } @else if $direction==bottom {
    border-top: $borderWidth solid $borderColor;
    border-left: $borderWidth dashed transparent;
    border-right: $borderWidth dashed transparent;
    @include props-dpr(border-top-width border-left-width border-right-width, $borderWidth $borderWidth $borderWidth);
  } @else if $direction==left {
    border-right: $borderWidth solid $borderColor;
    border-top: $borderWidth dashed transparent;
    border-bottom: $borderWidth dashed transparent;
    @include props-dpr(border-bottom-width border-top-width border-right-width, $borderWidth $borderWidth $borderWidth);
  }
}

%triangle-bottom {
  @include triangle;
}

%triangle-top {
  @include triangle($direction: top);
}


// btn
//----------------------------------------------------
// btn-basic
// 按钮基本样式，联合申明
%btn-basic {
  display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  text-align: center;
  border: 0 none;
  box-sizing: border-box;
  user-select: none;
}

// btn-size
// 按钮大小
@mixin btn-size($padding: nth($btnSize, 1), $height: nth($btnSize, 2), $radius: $btnRadius, $border: false) {
  padding: 0 $padding;
  height: $height;
  line-height: $height;
  @if $radius {
    border-radius: $btnRadius;
  }
  @if $border {
    line-height: $height - 2;
  }
}

// btn-color
// 包括按钮背景色，文本色，是否有边框
@mixin btn-color($textColor: nth($btnColor, 1), $bgColor: nth($btnColor, 2), $borderColor: false) {
  color: $textColor;
  background-color: $bgColor;
  @if $borderColor {
    @if length($borderColor) == 1 { // $borderColor: #dbdbdb
      border: 1px solid $borderColor;
    }
    @else if length($borderColor) == 2 { // $borderColor: #dbdbdb #ccc => #dbdbdb
      border: 1px solid nth($borderColor, 1);
    }
    @else {
      border: $borderColor; // $borderColor: 1px solid #dbdbdb
    }
  }
  &:hover {
    color: $textColor;
    @if lightness($bgColor) > 40% {
      background-color: darken($bgColor, 5%);
    }
    @else {
      background-color: lighten($bgColor, 5%);
    }
    @if length($borderColor) == 2 {
      border-color: nth($borderColor, 2); // $borderColor: #dbdbdb #ccc => #ccc
    }
  }
}

//Image
%image-style {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

@mixin image-responsive($width: 140px, $height: 200px, $children:img) {
  & {
    position: relative;
    padding-top: $height / $width * 100%;
    $childrenEle: li div p a span strong img;
    @if index($childrenEle, $children) {
      #{$children} {
        @extend %image-style;
      }
    }
    @else {
      .#{$children} {
        @extend %image-style;
      }
    }
  }
}

%image-responsive {
  @include image-responsive;
}

// px to rem
@function px2rem($value, $fontSizeRoot:$fontSize) {
  @return $value / $fontSizeRoot * 1rem;
}

//其他占位符
%transition-all {
  transition: all .3s ease-in-out;
}

%page-out {
  transition: transform 0.4s cubic-bezier(0.42, 0, 0.58, 1) 0.1s;
}

%page-in {
  transition: transform 0.3s cubic-bezier(0.42, 0, 0.58, 1);
}

//Font size
%f10 {
  @include props-dpr(font-size, 10px);
}

%f12 {
  @include props-dpr(font-size, 12px);
}

%f13 {
  @include props-dpr(font-size, 13px);
}

%f14 {
  @include props-dpr(font-size, 14px);
}

%f16 {
  @include props-dpr(font-size, 16px);
}

%f18 {
  @include props-dpr(font-size, 18px);
}

%f20 {
  @include props-dpr(font-size, 20px);
}

%f22 {
  @include props-dpr(font-size, 22px);
}

%f24 {
  @include props-dpr(font-size, 24px);
}

%f30 {
  @include props-dpr(font-size, 30px);
}

//Margin
%mb5 {
  @include props-dpr(margin-bottom, 5px);
}

%mb10 {
  @include props-dpr(margin-bottom, 10px);
}

%mb20 {
  @include props-dpr(margin-bottom, 20px);
}

%mb30 {
  @include props-dpr(margin-bottom, 30px);
}

%mr10 {
  @include props-dpr(margin-right, 10px);
}

%ml10 {
  @include props-dpr(margin-left, 10px);
}

%mt5 {
  @include props-dpr(margin-top, 5px);
}

%mt10 {
  @include props-dpr(margin-top, 10px);
}

%mt20 {
  @include props-dpr(margin-top, 10px);
}

%inline-block {
  display: inline-block;
  vertical-align: middle;
}

@mixin blur($value) {
  -webkit-filter: blur($value);
  -moz-filter: blur($value);
  -o-filter: blur($value);
  filter: blur($value);
}

%btn-default {
  color: $colorText;
  background-color: $colorBg;
  border-color: $colorBorder;
  &:hover {
    color: $colorText;
    background-color: $colorBg;
    border-color: $colorBorder;
  }
}

%btn-primary {
  color: $white;
  background-color: $primary;
  border-color: $primary;
  &:hover {
    color: $white;
    background-color: darken($primary, 5%);
    border-color: darken($primary, 5%);
  }
}

%form-control {
  display: block;
  height: nth($btnSize, 2);
  padding: 0 1em;
  border: 1px solid $colorBorder;
  color: $colorText;
  font-size: $fontSize;
  outline: none;
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
  &:focus {
    border-color: $primary;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 4px rgba($primary, .6);
  }
  &.disabled, &[disabled] {
    background-color: nth($colorDisabled, 2);
    color: nth($colorDisabled, 1);
    opacity: 1;
  }
}